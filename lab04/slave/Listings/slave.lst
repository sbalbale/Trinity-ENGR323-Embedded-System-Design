A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\slave.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE slave.asm SET(SMALL) DEBUG PRINT(.\Listings\slave.lst) OBJECT(.\Objects
                      \slave.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;-----------------------------------------------------------------------------
                       2     ; Slave.asm (Stopwatch Display Logic Version)
                       3     ;-----------------------------------------------------------------------------
                       4     ; Description: Receives 64 bytes of data via UART after being addressed.
                       5     ;              Stores data in RAM locations 30h-6Fh.
                       6     ;              Displays "dOnE" (hex D,0,E,E) when reception complete.
                       7     ;              Sequentially displays received data (00-FF as hex) at 1-sec intervals.
                       8     ;              Displays " End" (hex Blank,E,E,D) after showing all data.
                       9     ; Target:      Generic 8051 with Stopwatch-style P1 display hardware
                      10     ; Tool chain:  Generic 8051 Assembler
                      11     ;-----------------------------------------------------------------------------
                      12     
                      13     ;-----------------------------------------------------------------------------
                      14     ; Equates - Constants and Memory Locations
                      15     ;-----------------------------------------------------------------------------
  0005                16     MY_ADDR       EQU   05h       ; Slave's own address (must match master)
  0040                17     DATA_COUNT    EQU   64        ; Number of data bytes to receive (0x40)
  0030                18     RAM_START     EQU   30h       ; Starting RAM address for received data
  006F                19     RAM_END       EQU   RAM_START + DATA_COUNT - 1 ; Should be 6Fh
                      20     
                      21     ; Display Character Codes (Hex values for decoder on P1.0-P1.3)
  0000                22     CHAR_0        EQU   00h
  0001                23     CHAR_1        EQU   01h
  0002                24     CHAR_2        EQU   02h
  0003                25     CHAR_3        EQU   03h
  0004                26     CHAR_4        EQU   04h
  0005                27     CHAR_5        EQU   05h
  0006                28     CHAR_6        EQU   06h
  0007                29     CHAR_7        EQU   07h
  0008                30     CHAR_8        EQU   08h
  0009                31     CHAR_9        EQU   09h
  000A                32     CHAR_A        EQU   0Ah
  000B                33     CHAR_B        EQU   0Bh
  000C                34     CHAR_C        EQU   0Ch
  000D                35     CHAR_D        EQU   0Dh
  000E                36     CHAR_E        EQU   0Eh
  000F                37     CHAR_F        EQU   0Fh
  0010                38     CHAR_BLANK    EQU   10h       ; Code > 0Fh to signify blank (decoder dependent)
  000E                39     CHAR_DASH     EQU   0Eh       ; Using 'E' as a substitute for dash/initial state
                      40     
                      41     ; State Variables (using internal RAM locations > 20h)
  0020                42     STATE         EQU   20h       ; 0=Wait Addr, 1=Receiving, 2=Done, 3=Displaying Data, 4=End 
                             Display
  0021                43     RX_COUNT_VAR  EQU   21h       ; Counter for received bytes
  0022                44     RX_PTR        EQU   22h       ; Pointer (R0 used directly in ISR)
  0023                45     DISPLAY_POS   EQU   23h       ; 7-seg multiplex position (0-3)
  0024                46     DISPLAY_CHAR1 EQU   24h       ; Character CODE for Digit 1 (P1.0-3)
  0025                47     DISPLAY_CHAR2 EQU   25h       ; Character CODE for Digit 2 (P1.0-3)
  0026                48     DISPLAY_CHAR3 EQU   26h       ; Character CODE for Digit 3 (P1.0-3)
  0027                49     DISPLAY_CHAR4 EQU   27h       ; Character CODE for Digit 4 (P1.0-3)
  0028                50     DISPLAY_PTR   EQU   28h       ; Pointer for reading data back from RAM for display
  0029                51     DELAY_COUNT   EQU   29h       ; Counter for 1-second delay (counts Timer0 overflows)
  002A                52     TEMP_A        EQU   2Ah       ; Temporary storage for ACC in ISRs
  002B                53     TEMP_PSW      EQU   2Bh       ; Temporary storage for PSW in ISRs
  002C                54     TEMP_B        EQU   2Ch       ; Temporary storage for B in ISRs
                      55     
                      56     ;-----------------------------------------------------------------------------
A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     2

                      57     ; Interrupt Vector Table
                      58     ;-----------------------------------------------------------------------------
0000                  59                 ORG   0000h       ; Reset Vector
0000 2100             60                 AJMP  MAIN
                      61     
000B                  62                 ORG   000Bh       ; Timer 0 Overflow Vector
000B 21AC             63                 AJMP  Timer0_ISR
                      64     
0023                  65                 ORG   0023h       ; Serial Port (UART) Vector
0023 2145             66                 AJMP  UART_ISR
                      67     
                      68     ;-----------------------------------------------------------------------------
                      69     ; Main Program
                      70     ;-----------------------------------------------------------------------------
0100                  71                 ORG   0100h       ; Start of code memory
0100                  72     MAIN:
0100 758160           73                 MOV   SP, #60h    ; Initialize Stack Pointer (adjust if needed)
                      74     
                      75                 ; Initialize State Variables
0103 752000           76                 MOV   STATE, #00h   ; Start in Waiting for Address state
0106 752100           77                 MOV   RX_COUNT_VAR, #00h
0109 752300           78                 MOV   DISPLAY_POS, #00h
010C 752900           79                 MOV   DELAY_COUNT, #00h
010F 752830           80                 MOV   DISPLAY_PTR, #RAM_START ; Initialize display pointer
                      81     
                      82                 ; Initialize Display Characters to "----" (using CHAR_DASH code)
0112 75240E           83                 MOV   DISPLAY_CHAR1, #CHAR_DASH
0115 75250E           84                 MOV   DISPLAY_CHAR2, #CHAR_DASH
0118 75260E           85                 MOV   DISPLAY_CHAR3, #CHAR_DASH
011B 75270E           86                 MOV   DISPLAY_CHAR4, #CHAR_DASH
                      87     
                      88                 ; Call Initialization Routines
011E 3128             89                 ACALL Port_Init
0120 312C             90                 ACALL Timer_Init
0122 313D             91                 ACALL UART_Init
0124 3141             92                 ACALL Interrupt_Init
                      93     
0126                  94     MainLoop:
0126 80FE             95                 SJMP  MainLoop      ; Everything is handled by interrupts
                      96     
                      97     ;-----------------------------------------------------------------------------
                      98     ; Initialization Subroutines
                      99     ;-----------------------------------------------------------------------------
0128                 100     Port_Init:
                     101                 ; Assume P1 is output for display (combined data/select)
0128 7590FF          102                 MOV   P1, #0FFh     ; Initialize P1 (direction set by HW/default, often input)
                     103                 ; If using C8051Fxxx style MCU, P1MDOUT might be needed
                     104                 ; MOV   P1MDOUT, #0FFh ; Set P1 as push-pull if needed
012B 22              105                 RET
                     106     
012C                 107     Timer_Init:
                     108                 ; Timer 1: Baud Rate Generator (Mode 2, 8-bit Auto-Reload)
012C 758921          109                 MOV   TMOD, #21h    ; Timer 1: Mode 2, Timer 0: Mode 1 (16-bit)
012F 758DFA          110                 MOV   TH1, #0FAh    ; 9600 Baud at 22.1184 MHz (match master C code)
0132 D28E            111                 SETB  TR1           ; Start Timer 1
                     112     
                     113                 ; Timer 0: Display Refresh & 1-Second Delay (Mode 1, 16-bit)
                     114                 ; Aim for ~5ms refresh interval => DC00h for 22.1184 MHz
0134 758CDC          115                 MOV   TH0, #0DCh    ; Load Timer 0 initial value High Byte
0137 758A00          116                 MOV   TL0, #00h     ; Load Timer 0 initial value Low Byte
013A D28C            117                 SETB  TR0           ; Start Timer 0
013C 22              118                 RET
                     119     
013D                 120     UART_Init:
013D 7598D0          121                 MOV   SCON, #0D0h   ; Mode 3 (9-bit UART), REN=1 (Enable Receive), SM2=1 initia
                             lly
A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     3

0140 22              122                 RET
                     123     
0141                 124     Interrupt_Init:
0141 75A892          125                 MOV   IE, #92h      ; EA=1, ES=1, ET0=1
0144 22              126                 RET
                     127     
                     128     ;-----------------------------------------------------------------------------
                     129     ; Interrupt Service Routines
                     130     ;-----------------------------------------------------------------------------
                     131     
                     132     ; Serial Port Interrupt Service Routine (Identical to previous version)
0145                 133     UART_ISR:
0145 C0E0            134                 PUSH  ACC           ; Save registers used
0147 C0D0            135                 PUSH  PSW
0149 C082            136                 PUSH  DPL
014B C083            137                 PUSH  DPH
014D C0F0            138                 PUSH  B
                     139     
014F F52A            140                 MOV   TEMP_A, A     ; Use temporary RAM storage
0151 85D02B          141                 MOV   TEMP_PSW, PSW
0154 85F02C          142                 MOV   TEMP_B, B
                     143     
0157 209805          144                 JB    RI, UART_Receive ; Jump if Receive Interrupt occurred
015A 30993C          145                 JNB   TI, UART_ISR_End ; Ignore Transmit Interrupt
                     146     
015D C299            147                 CLR   TI
                     148     
015F                 149     UART_Receive:
015F E598            150                 MOV   A, SCON       ; Check SM2 bit status
0161 20E521          151                 JB    ACC.5, Addr_Check ; If SM2 is 1, expect address
                     152     
0164                 153     Data_Receive:                  ; SM2 is 0, expect data
0164 E599            154                 MOV   A, SBUF        ; Read received data byte
0166 A822            155                 MOV   R0, RX_PTR     ; Load RAM pointer into R0
0168 F6              156                 MOV   @R0, A         ; Store data byte in RAM
0169 08              157                 INC   R0             ; Increment RAM pointer
016A 8822            158                 MOV   RX_PTR, R0     ; Save updated pointer
016C D52128          159                 DJNZ  RX_COUNT_VAR, Data_Receive_End ; Decrement byte counter
                     160     
                     161                 ; --- All Bytes Received ---
016F 752002          162                 MOV   STATE, #02h    ; Set state to Done
0172 D29D            163                 SETB  SM2            ; Wait for next address
0174 75240D          164                 MOV   DISPLAY_CHAR1, #CHAR_D ; Prepare "dOnE" display
0177 752500          165                 MOV   DISPLAY_CHAR2, #CHAR_0 ; Use 0 for O
017A 75260E          166                 MOV   DISPLAY_CHAR3, #CHAR_E ; Use E for n
017D 75270E          167                 MOV   DISPLAY_CHAR4, #CHAR_E
0180 7529C8          168                 MOV   DELAY_COUNT, #200 ; Start 1-sec delay counter (~200 * 5ms)
0183 8012            169                 SJMP  Data_Receive_End
                     170     
0185                 171     Addr_Check:                    ; SM2 is 1, expect address
0185 E599            172                 MOV   A, SBUF        ; Read potential address
0187 B4050D          173                 CJNE  A, #MY_ADDR, Addr_Mismatch
                     174     
                     175                 ; --- Address Matched ---
018A C29D            176                 CLR   SM2            ; Enable data reception
018C 752001          177                 MOV   STATE, #01h    ; State = Receiving Data
018F 752140          178                 MOV   RX_COUNT_VAR, #DATA_COUNT ; Init byte counter
0192 752230          179                 MOV   RX_PTR, #RAM_START ; Init RAM pointer
0195 8000            180                 SJMP  Data_Receive_End
                     181     
0197                 182     Addr_Mismatch:                 ; Address did not match, ignore
                     183                 ; SM2 remains 1
                     184     
0197                 185     Data_Receive_End:
0197 C298            186                 CLR   RI             ; Clear Receive Interrupt flag
                     187     
A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     4

0199                 188     UART_ISR_End:
0199 E52A            189                 MOV   A, TEMP_A     ; Restore registers
019B 852BD0          190                 MOV   PSW, TEMP_PSW
019E 852CF0          191                 MOV   B, TEMP_B
                     192     
01A1 D0F0            193                 POP   B
01A3 D083            194                 POP   DPH
01A5 D082            195                 POP   DPL
01A7 D0D0            196                 POP   PSW
01A9 D0E0            197                 POP   ACC
01AB 32              198                 RETI
                     199     
                     200     ; Timer 0 Interrupt Service Routine (Stopwatch-style Display Logic)
01AC                 201     Timer0_ISR:
01AC C0E0            202                 PUSH  ACC           ; Save registers
01AE C0D0            203                 PUSH  PSW
01B0 C0F0            204                 PUSH  B
                     205     
01B2 F52A            206                 MOV   TEMP_A, A     ; Use temporary RAM storage
01B4 85D02B          207                 MOV   TEMP_PSW, PSW
01B7 85F02C          208                 MOV   TEMP_B, B
                     209     
                     210                 ; Reload Timer 0 for next ~5ms interval
01BA C28C            211                 CLR   TR0
01BC 758CDC          212                 MOV   TH0, #0DCh
01BF 758A00          213                 MOV   TL0, #00h
01C2 D28C            214                 SETB  TR0
                     215     
                     216                 ; --- Handle States and Select Display Characters ---
01C4 E520            217                 MOV   A, STATE
01C6 B40202          218                 CJNE  A, #02h, T0_Check_State_3 ; Check if in DONE state (2)
                     219                 ; State 2 ("dOnE"): Already set display chars in UART_ISR
01C9 801E            220                 SJMP  T0_Update_Display
                     221     
01CB                 222     T0_Check_State_3:
01CB B4030A          223                 CJNE  A, #03h, T0_Check_State_4 ; Check if in DISPLAYING DATA state (3)
                     224                 ; State 3 (Displaying Data): Decrement delay, update display if needed
01CE D52918          225                 DJNZ  DELAY_COUNT, T0_Update_Display ; If delay counter not zero, just refresh 
                             display
                     226                 ; --- 1 Second Delay Expired ---
01D1 7529C8          227                 MOV   DELAY_COUNT, #200 ; Reload delay counter (~200 * 5ms = 1 sec)
01D4 5122            228                 ACALL Display_Next_Hex_Byte ; Update display chars for next byte
01D6 8011            229                 SJMP  T0_Update_Display
                     230     
01D8                 231     T0_Check_State_4:
01D8 B4040E          232                 CJNE  A, #04h, T0_Update_Display ; Check if in END state (4)
                     233                 ; State 4 (" End"): Set display chars
01DB 752410          234                 MOV   DISPLAY_CHAR1, #CHAR_BLANK ; Blank
01DE 75250E          235                 MOV   DISPLAY_CHAR2, #CHAR_E     ; E
01E1 75260E          236                 MOV   DISPLAY_CHAR3, #CHAR_E     ; n (using E)
01E4 75270D          237                 MOV   DISPLAY_CHAR4, #CHAR_D     ; d
01E7 8000            238                 SJMP  T0_Update_Display
                     239     
                     240                 ; States 0 (Wait Addr) & 1 (Receiving): Use "----" (CHAR_DASH) set at init
                     241     
                     242                 ; --- Multiplex Display using Stopwatch Logic ---
01E9                 243     T0_Update_Display:
01E9 E523            244                 MOV   A, DISPLAY_POS ; Get current position (0-3)
01EB B40006          245                 CJNE  A, #00h, T0_Pos1
01EE E524            246                 MOV   A, DISPLAY_CHAR1 ; Get Digit 1 char code
01F0 4400            247                 ORL   A, #00h        ; OR with position code 0
01F2 8016            248                 SJMP  T0_Output_Digit
                     249     
01F4 B40106          250     T0_Pos1:    CJNE  A, #01h, T0_Pos2
01F7 E525            251                 MOV   A, DISPLAY_CHAR2 ; Get Digit 2 char code
01F9 4410            252                 ORL   A, #10h        ; OR with position code 1 (0001 0000)
A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     5

01FB 800D            253                 SJMP  T0_Output_Digit
                     254     
01FD B40206          255     T0_Pos2:    CJNE  A, #02h, T0_Pos3
0200 E526            256                 MOV   A, DISPLAY_CHAR3 ; Get Digit 3 char code
0202 4420            257                 ORL   A, #20h        ; OR with position code 2 (0010 0000)
0204 8004            258                 SJMP  T0_Output_Digit
                     259     
0206                 260     T0_Pos3:    ; Position must be 3
0206 E527            261                 MOV   A, DISPLAY_CHAR4 ; Get Digit 4 char code
0208 4430            262                 ORL   A, #30h        ; OR with position code 3 (0011 0000)
                     263                 ; SJMP T0_Output_Digit ; Fall through
                     264     
020A                 265     T0_Output_Digit:
020A F590            266                 MOV   P1, A           ; Output combined value to Port 1
                     267     
                     268                 ; Update display position for next interrupt
020C E523            269                 MOV   A, DISPLAY_POS
020E 04              270                 INC   A
020F 5403            271                 ANL   A, #03h        ; Modulo 4 wrap-around
0211 F523            272                 MOV   DISPLAY_POS, A
                     273     
                     274                 ; --- Restore registers ---
0213                 275     T0_ISR_End:
0213 E52A            276                 MOV   A, TEMP_A     ; Restore registers from RAM
0215 852BD0          277                 MOV   PSW, TEMP_PSW
0218 852CF0          278                 MOV   B, TEMP_B
                     279     
021B D0F0            280                 POP   B
021D D0D0            281                 POP   PSW
021F D0E0            282                 POP   ACC
0221 32              283                 RETI
                     284     
                     285     ;-----------------------------------------------------------------------------
                     286     ; Helper Subroutines
                     287     ;-----------------------------------------------------------------------------
                     288     
                     289     ; Updates DISPLAY_CHAR3/4 with hex nibbles of the next byte from RAM.
                     290     ; Sets DISPLAY_CHAR1/2 to Blank. Called every 1 second when STATE is 3.
0222                 291     Display_Next_Hex_Byte:
0222 C0E0            292                 PUSH  ACC
0224 C0F0            293                 PUSH  B
0226 C082            294                 PUSH  DPL
0228 C083            295                 PUSH  DPH
                     296     
022A A828            297                 MOV   R0, DISPLAY_PTR ; Get current RAM address to display
022C E8              298                 MOV   A, R0
022D B47005          299                 CJNE  A, #(RAM_END + 1), DNHB_Continue ; Check if past last address
                     300                 ; --- Finished Displaying All Data ---
0230 752004          301                 MOV   STATE, #04h     ; Transition to END state
0233 8016            302                 SJMP  DNHB_End
                     303     
0235                 304     DNHB_Continue:
0235 E6              305                 MOV   A, @R0          ; Get data byte from RAM
0236 0528            306                 INC   DISPLAY_PTR     ; Increment pointer for next time
                     307     
                     308                 ; Display hex byte on digits 3 & 4, blank digits 1 & 2
0238 752410          309                 MOV   DISPLAY_CHAR1, #CHAR_BLANK
023B 752510          310                 MOV   DISPLAY_CHAR2, #CHAR_BLANK
                     311     
023E F5F0            312                 MOV   B, A          ; Save original byte in B
0240 C4              313                 SWAP  A             ; Get high nibble
0241 540F            314                 ANL   A, #0Fh       ; Isolate high nibble (0-F)
0243 F526            315                 MOV   DISPLAY_CHAR3, A ; Store hex code in Digit 3 variable
                     316     
0245 E5F0            317                 MOV   A, B          ; Restore original byte
0247 540F            318                 ANL   A, #0Fh       ; Isolate low nibble (0-F)
A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     6

0249 F527            319                 MOV   DISPLAY_CHAR4, A ; Store hex code in Digit 4 variable
                     320     
024B                 321     DNHB_End:
024B D083            322                 POP   DPH
024D D082            323                 POP   DPL
024F D0F0            324                 POP   B
0251 D0E0            325                 POP   ACC
0253 22              326                 RET
                     327     
                     328     ;-----------------------------------------------------------------------------
                     329                 END
                             ;-----------------------------------------------------------------------------
A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E                T Y P E  V A L U E   ATTRIBUTES

ACC . . . . . . . . .  D ADDR   00E0H   A   
ADDR_CHECK. . . . . .  C ADDR   0185H   A   
ADDR_MISMATCH . . . .  C ADDR   0197H   A   
B . . . . . . . . . .  D ADDR   00F0H   A   
CHAR_0. . . . . . . .  N NUMB   0000H   A   
CHAR_1. . . . . . . .  N NUMB   0001H   A   
CHAR_2. . . . . . . .  N NUMB   0002H   A   
CHAR_3. . . . . . . .  N NUMB   0003H   A   
CHAR_4. . . . . . . .  N NUMB   0004H   A   
CHAR_5. . . . . . . .  N NUMB   0005H   A   
CHAR_6. . . . . . . .  N NUMB   0006H   A   
CHAR_7. . . . . . . .  N NUMB   0007H   A   
CHAR_8. . . . . . . .  N NUMB   0008H   A   
CHAR_9. . . . . . . .  N NUMB   0009H   A   
CHAR_A. . . . . . . .  N NUMB   000AH   A   
CHAR_B. . . . . . . .  N NUMB   000BH   A   
CHAR_BLANK. . . . . .  N NUMB   0010H   A   
CHAR_C. . . . . . . .  N NUMB   000CH   A   
CHAR_D. . . . . . . .  N NUMB   000DH   A   
CHAR_DASH . . . . . .  N NUMB   000EH   A   
CHAR_E. . . . . . . .  N NUMB   000EH   A   
CHAR_F. . . . . . . .  N NUMB   000FH   A   
DATA_COUNT. . . . . .  N NUMB   0040H   A   
DATA_RECEIVE. . . . .  C ADDR   0164H   A   
DATA_RECEIVE_END. . .  C ADDR   0197H   A   
DELAY_COUNT . . . . .  N NUMB   0029H   A   
DISPLAY_CHAR1 . . . .  N NUMB   0024H   A   
DISPLAY_CHAR2 . . . .  N NUMB   0025H   A   
DISPLAY_CHAR3 . . . .  N NUMB   0026H   A   
DISPLAY_CHAR4 . . . .  N NUMB   0027H   A   
DISPLAY_NEXT_HEX_BYTE  C ADDR   0222H   A   
DISPLAY_POS . . . . .  N NUMB   0023H   A   
DISPLAY_PTR . . . . .  N NUMB   0028H   A   
DNHB_CONTINUE . . . .  C ADDR   0235H   A   
DNHB_END. . . . . . .  C ADDR   024BH   A   
DPH . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . .  D ADDR   0082H   A   
IE. . . . . . . . . .  D ADDR   00A8H   A   
INTERRUPT_INIT. . . .  C ADDR   0141H   A   
MAIN. . . . . . . . .  C ADDR   0100H   A   
MAINLOOP. . . . . . .  C ADDR   0126H   A   
MY_ADDR . . . . . . .  N NUMB   0005H   A   
P1. . . . . . . . . .  D ADDR   0090H   A   
PORT_INIT . . . . . .  C ADDR   0128H   A   
PSW . . . . . . . . .  D ADDR   00D0H   A   
RAM_END . . . . . . .  N NUMB   006FH   A   
RAM_START . . . . . .  N NUMB   0030H   A   
RI. . . . . . . . . .  B ADDR   0098H.0 A   
RX_COUNT_VAR. . . . .  N NUMB   0021H   A   
RX_PTR. . . . . . . .  N NUMB   0022H   A   
SBUF. . . . . . . . .  D ADDR   0099H   A   
SCON. . . . . . . . .  D ADDR   0098H   A   
SM2 . . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . .  D ADDR   0081H   A   
STATE . . . . . . . .  N NUMB   0020H   A   
T0_CHECK_STATE_3. . .  C ADDR   01CBH   A   
T0_CHECK_STATE_4. . .  C ADDR   01D8H   A   
T0_ISR_END. . . . . .  C ADDR   0213H   A   
T0_OUTPUT_DIGIT . . .  C ADDR   020AH   A   
T0_POS1 . . . . . . .  C ADDR   01F4H   A   
A51 MACRO ASSEMBLER  SLAVE                                                                04/16/2025 15:25:54 PAGE     8

T0_POS2 . . . . . . .  C ADDR   01FDH   A   
T0_POS3 . . . . . . .  C ADDR   0206H   A   
T0_UPDATE_DISPLAY . .  C ADDR   01E9H   A   
TEMP_A. . . . . . . .  N NUMB   002AH   A   
TEMP_B. . . . . . . .  N NUMB   002CH   A   
TEMP_PSW. . . . . . .  N NUMB   002BH   A   
TH0 . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . .  D ADDR   008DH   A   
TI. . . . . . . . . .  B ADDR   0098H.1 A   
TIMER0_ISR. . . . . .  C ADDR   01ACH   A   
TIMER_INIT. . . . . .  C ADDR   012CH   A   
TL0 . . . . . . . . .  D ADDR   008AH   A   
TMOD. . . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . .  B ADDR   0088H.6 A   
UART_INIT . . . . . .  C ADDR   013DH   A   
UART_ISR. . . . . . .  C ADDR   0145H   A   
UART_ISR_END. . . . .  C ADDR   0199H   A   
UART_RECEIVE. . . . .  C ADDR   015FH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
