A51 MACRO ASSEMBLER  SLAVE                                                                04/21/2025 16:51:13 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\slave.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE slave.asm SET(SMALL) DEBUG PRINT(.\Listings\slave.lst) OBJECT(.\Objects
                      \slave.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; ;-------------------------------------------------------------------------------
                       2     ; ; Slave.a51  — UART‑slave with countup.asm display logic
                       3     ; ;-------------------------------------------------------------------------------
                       4     ;                 ORG     0000h
                       5     ;                 AJMP    MAIN
                       6     
                       7     ;                 ORG     000Bh           ; Timer0 → display multiplex
                       8     ;                 AJMP    Timer0_ISR
                       9     
                      10     ;                 ORG     0023h           ; Serial interrupt
                      11     ;                 AJMP    SERIAL_ISR
                      12     
                      13     ;                 ORG     0030h           ; Use same area as countup.asm
                      14     ; MAIN:
                      15     ;     ; ===== Stack & Timer setup (countup.asm) =====
                      16     ;     MOV     SP, #30h
                      17     ;     MOV     TMOD, #21h       ; T1=mode2 for UART baud, T0=mode1 for display
                      18     ;     ; Timer0 initial 5 ms (per countup.asm)
                      19     ;     MOV     TH0, #0ECh
                      20     ;     MOV     TL0, #078h
                      21     ;     SETB    ET0
                      22     ;     SETB    EA
                      23     ;     SETB    TR0
                      24     
                      25     ;     ; ===== UART@9600, mode‑3, SM2=1, REN=1 =====
                      26     ;     MOV     TH1, #0FDh
                      27     ;     MOV     TL1, #0FDh
                      28     ;     SETB    TR1
                      29     ;     MOV     SCON, #0D0h
                      30     ;     SETB    ES
                      31     
                      32     ;     ; ===== Initial display = “0000” =====
                      33     ;     MOV     R0, #00h      ; ones digit = 0
                      34     ;     MOV     R1, #00h      ; tens
                      35     ;     MOV     R2, #00h      ; hundreds
                      36     ;     MOV     R3, #00h      ; thousands
                      37     ;     MOV     R4, #00h      ; display position
                      38     
                      39     ;     SJMP    $             ; spin; all work in ISRs
                      40     
                      41     ; ;-------------------------------------------------------------------------------
                      42     ; ; Timer0 ISR: reload & multiplex (exact from countup.asm)
                      43     ; ;-------------------------------------------------------------------------------
                      44     ; Timer0_ISR:
                      45     ;     PUSH    ACC
                      46     ;     PUSH    PSW
                      47     
                      48     ;     ; — reload for ~5 ms
                      49     ;     CLR     TR0
                      50     ;     MOV     TH0, #0ECh
                      51     ;     MOV     TL0, #08Bh
                      52     ;     CLR     TF0
                      53     ;     SETB    TR0
                      54     
                      55     ;     ; — display one digit
                      56     ;     MOV     A, R4
                      57     ;     CJNE    A, #00h, Try_Pos1
A51 MACRO ASSEMBLER  SLAVE                                                                04/21/2025 16:51:13 PAGE     2

                      58     ;         MOV     A, R3          ; thousands digit
                      59     ;         SJMP    Output_Digit
                      60     
                      61     ; Try_Pos1:
                      62     ;     CJNE    A, #01h, Try_Pos2
                      63     ;         MOV     A, R2          ; hundreds
                      64     ;         ORL     A, #10h
                      65     ;         SJMP    Output_Digit
                      66     
                      67     ; Try_Pos2:
                      68     ;     CJNE    A, #02h, Try_Pos3
                      69     ;         MOV     A, R1          ; tens
                      70     ;         ORL     A, #20h
                      71     ;         SJMP    Output_Digit
                      72     
                      73     ; Try_Pos3:
                      74     ;         MOV     A, R0          ; ones
                      75     ;         ORL     A, #30h
                      76     
                      77     ; Output_Digit:
                      78     ;     MOV     P1, A
                      79     
                      80     ;     ; — advance position 0→1→2→3→0
                      81     ;     MOV     A, R4
                      82     ;     INC     A
                      83     ;     CJNE    A, #04h, Save_Pos
                      84     ;         MOV     A, #00h
                      85     ; Save_Pos:
                      86     ;     MOV     R4, A
                      87     
                      88     ;     POP     PSW
                      89     ;     POP     ACC
                      90     ;     RETI
                      91     
                      92     ; ;-------------------------------------------------------------------------------
                      93     ; ; Serial ISR: address vs data, sets R3:R0 for display
                      94     ; ;-------------------------------------------------------------------------------
                      95     ; SERIAL_ISR:
                      96     ;     JNB     RI, Done
                      97     ;     CLR     RI
                      98     
                      99     ;     ; — address byte? (RB8=1)
                     100     ;     JNB     RB8, Got_Data
                     101     
                     102     ;     ; address path
                     103     ;     MOV     A, SBUF
                     104     ;     CJNE    A, #05h, Done     ; only slave #05
                     105     ;     CLR     SM2               ; start data reception
                     106     ;     ; show “9999”
                     107     ;     MOV     R0, #09h
                     108     ;     MOV     R1, #09h
                     109     ;     MOV     R2, #09h
                     110     ;     MOV     R3, #09h
                     111     ;     SJMP    Done
                     112     
                     113     ; Got_Data:
                     114     ;     ; — data byte
                     115     ;     MOV     A, SBUF
                     116     ;     ; store into XDATA or RAM as needed, e.g. MOVX @DPTR,A; INC DPTR
                     117     ;     ; your existing save‑to‑RAM code goes here…
                     118     
                     119     ;     ; after storing Nth byte, convert and display:
                     120     ;     ; tens → R1, ones → R0; clear high digits for “00XX” or “XXYY”
                     121     ;     ; compute decimal digits in A/B:
                     122     ;     ;   MOV B,#10
                     123     ;     ;   DIV AB       ; A=quotient, B=remainder
A51 MACRO ASSEMBLER  SLAVE                                                                04/21/2025 16:51:13 PAGE     3

                     124     ;     ;   MOV     R1, A
                     125     ;     ;   MOV     R0, B
                     126     ;     ;   MOV     R2, #00h
                     127     ;     ;   MOV     R3, #00h
                     128     
                     129     ;     ; delay ~1 s between bytes (busy‑wait)
                     130     ;     ACALL  ONESEC_DELAY
                     131     
                     132     ; Done:
                     133     ;     RETI
                     134     
                     135     ; ;-------------------------------------------------------------------------------
                     136     ; ; ONESEC_DELAY: rough 1 s busy loop (tune to your crystal)
                     137     ; ;-------------------------------------------------------------------------------
                     138     ; ONESEC_DELAY:
                     139     ;     MOV     R5, #200
                     140     ; D1:
                     141     ;     MOV     R6, #250
                     142     ; D2:
                     143     ;     DJNZ    R6, D2
                     144     ;     DJNZ    R5, D1
                     145     ;     RET
                     146     
                     147     ;                 END
                     148     
                     149     
                     150     ;-------------------------------------------------------------------------------
                     151     ; Slave.a51  — UART slave with 5 ms TDM scan & 1 s‑per‑digit display routine
                     152     ;-------------------------------------------------------------------------------
                     153     
0000                 154                     ORG     0000h
0000 0125            155                     AJMP    MAIN
                     156     
000B                 157                     ORG     000Bh           ; Timer0 overflow → TDM scan
000B 0185            158                     AJMP    TDM_ISR
                     159     
0023                 160                     ORG     0023h           ; Serial interrupt
0023 01A2            161                     AJMP    SERIAL_ISR
                     162     
                     163     ;-------------------------------------------------------------------------------
                     164     ; Variables in internal RAM
                     165     ;-------------------------------------------------------------------------------
  0070               166     ONES        EQU     070h           ; digit 0 buffer (0x0N → ones place)
  0071               167     TENS        EQU     071h           ; digit 1 buffer (0x1N → tens place)
  0072               168     HUNDREDS    EQU     072h           ; digit 2 buffer (0x2N → hundreds/blank)
  0073               169     THOUSANDS   EQU     073h           ; digit 3 buffer (0x3N → thousands/blank)
                     170     
  0030               171     DATA_START  EQU     030h           ; where to save incoming bytes
  0040               172     DATA_COUNT  EQU     064           ; number of bytes to save (0x3F+1)
                     173     
  0075               174     DONE_FLAG   EQU     075h           ; set to 1 when all DATA_COUNT bytes received
                     175     
                     176     ;-------------------------------------------------------------------------------
                     177     ; MAIN: init UART, timers, then wait/display loop
                     178     ;-------------------------------------------------------------------------------
0025                 179     MAIN:
                     180         ;––– UART @9600, Mode 3, SM2=1, REN=1 –––
0025 758921          181         MOV     TMOD,   #21h        ; T1 mode2 for baud, T0 mode1 for display
0028 758DFD          182         MOV     TH1,    #0FDh       ; reload for 9600 @ 11.0592 MHz
002B 758BFD          183         MOV     TL1,    #0FDh
002E D28E            184         SETB    TR1
0030 7598D0          185         MOV     SCON,   #0D0h       ; SM0=1,SM1=1 (mode3), SM2=1, REN=1
0033 D2AC            186         SETB    ES
0035 D2AF            187         SETB    EA
                     188     
                     189         ;––– Timer0 setup for ~5 ms interrupts (EDFFh → 1200d) –––
A51 MACRO ASSEMBLER  SLAVE                                                                04/21/2025 16:51:13 PAGE     4

0037 758CED          190         MOV     TH0,    #0EDh
003A 758AFF          191         MOV     TL0,    #0FFh
003D D2A9            192         SETB    ET0
003F D28C            193         SETB    TR0
                     194     
                     195         ;––– Initialize display to “0000” –––
0041 757000          196         MOV     ONES,      #00h      ; 0 at ones
0044 757110          197         MOV     TENS,      #10h      ; 0 at tens
0047 757220          198         MOV     HUNDREDS,  #20h      ; blank hundreds
004A 757330          199         MOV     THOUSANDS, #30h      ; blank thousands
004D 7870            200         MOV     R0,        #070h     ; pointer into ONES…THOUSANDS block
                     201     
                     202         ;––– Clear DONE_FLAG –––
004F C275            203         CLR     DONE_FLAG
                     204     
0051                 205     main_loop:
                     206         ; wait for all bytes received
0051 3075FD          207         JNB     DONE_FLAG, main_loop
0054 C275            208         CLR     DONE_FLAG
                     209     
                     210         ;––– 1) Show “9999” for 1 s –––
0056 757009          211         MOV     ONES,      #09h
0059 757119          212         MOV     TENS,      #19h
005C 757229          213         MOV     HUNDREDS,  #29h
005F 757339          214         MOV     THOUSANDS, #39h
0062 11C0            215         ACALL   ONESEC_DELAY
                     216     
                     217         ;––– 2) Display each saved byte with 1 s between –––
0064 7930            218         MOV     R1,        #DATA_START  ; R1 → save address
0066 7F40            219         MOV     R7,        #DATA_COUNT  ; R7 → count
                     220     
0068                 221     disp_loop:
0068 E7              222         MOV     A,  @R1               ; fetch byte
0069 75F00A          223         MOV     B,  #10
006C 84              224         DIV     AB                    ; A=tens, B=ones
                     225     
                     226         ; tens digit into TENS
006D F571            227         MOV     TENS,  A
006F 437120          228         ORL     TENS,  #20h           ; set position=1
                     229     
                     230         ; ones digit into ONES
0072 85F070          231         MOV     ONES,  B             
0075 437030          232         ORL     ONES,  #30h           ; set position=3
                     233     
                     234         ; blank left two digits
0078 757210          235         MOV     HUNDREDS, #10h
007B 757300          236         MOV     THOUSANDS,#00h
                     237     
007E 11C0            238         ACALL   ONESEC_DELAY
                     239     
0080 09              240         INC     R1
0081 DFE5            241         DJNZ    R7, disp_loop
                     242     
0083 80CC            243         SJMP    main_loop
                     244     
                     245     ;-------------------------------------------------------------------------------
                     246     ; Timer0 ISR: 5 ms TDM scan (exact from countup.asm)
                     247     ;-------------------------------------------------------------------------------
0085                 248     TDM_ISR:
0085 C0E0            249         PUSH    ACC
0087 C0D0            250         PUSH    PSW
                     251     
0089 C28C            252         CLR     TR0
008B 758CEC          253         MOV     TH0,   #0ECh       ; high byte for ~5 ms
008E 758A7C          254         MOV     TL0,   #07Ch       ; low byte  for ~5 ms
0091 C28D            255         CLR     TF0
A51 MACRO ASSEMBLER  SLAVE                                                                04/21/2025 16:51:13 PAGE     5

0093 D28C            256         SETB    TR0
                     257     
                     258         ; output the “segment+position” byte
0095 8690            259         MOV     P1,    @R0
0097 08              260         INC     R0
0098 B87402          261         CJNE    R0,    #074h, TDM_DONE
009B 7870            262             MOV     R0,    #070h     ; wrap back
009D                 263     TDM_DONE:
                     264     
009D D0D0            265         POP     PSW
009F D0E0            266         POP     ACC
00A1 32              267         RETI
                     268     
                     269     ;-------------------------------------------------------------------------------
                     270     ; SERIAL ISR: address vs. data, save to RAM, set DONE_FLAG at end
                     271     ;-------------------------------------------------------------------------------
00A2                 272     SERIAL_ISR:
00A2 30981A          273         JNB     RI,    _ser_end
00A5 C298            274         CLR     RI
                     275     
                     276         ; address byte? RB8=1
00A7 309A0D          277         JNB     RB8,   _data
                     278         ; —— address path ——
00AA E599            279         MOV     A,     SBUF
00AC B40510          280         CJNE    A,     #05h, _ser_end  ; only slave 0x05
00AF C29D            281         CLR     SM2                      ; now accept data bytes
00B1 7930            282         MOV     R1,    #DATA_START      ; init save ptr
00B3 7F40            283         MOV     R7,    #DATA_COUNT      ; init byte count
00B5 8008            284         SJMP    _ser_end
                     285     
00B7                 286     _data:
                     287         ; —— data byte path ——
00B7 E599            288         MOV     A,     SBUF
00B9 F7              289         MOV     @R1,   A               ; save into 0x30–0x6F
00BA 09              290         INC     R1
00BB DF02            291         DJNZ    R7,    _ser_end        ; still more to come
                     292     
                     293         ; —— all bytes in! ——
00BD D275            294         SETB    DONE_FLAG
                     295     
00BF                 296     _ser_end:
00BF 32              297         RETI
                     298     
                     299     ;-------------------------------------------------------------------------------
                     300     ; ONESEC_DELAY: rough 1 s busy‑wait (200×250 loops ≈1 s @12 µs/loop)
                     301     ; interrupts remain enabled so TDM_ISR keeps scanning
                     302     ;-------------------------------------------------------------------------------
00C0                 303     ONESEC_DELAY:
00C0 7DC8            304         MOV     R5,    #200
00C2                 305     DLY1:
00C2 7EFA            306         MOV     R6,    #250
00C4                 307     DLY2:
00C4 DEFE            308         DJNZ    R6,    DLY2
00C6 DDFA            309         DJNZ    R5,    DLY1
00C8 22              310         RET
                     311     
                     312                     END
A51 MACRO ASSEMBLER  SLAVE                                                                04/21/2025 16:51:13 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . .  D ADDR   00E0H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
DATA_COUNT . . . .  N NUMB   0040H   A   
DATA_START . . . .  N NUMB   0030H   A   
DISP_LOOP. . . . .  C ADDR   0068H   A   
DLY1 . . . . . . .  C ADDR   00C2H   A   
DLY2 . . . . . . .  C ADDR   00C4H   A   
DONE_FLAG. . . . .  N NUMB   0075H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
HUNDREDS . . . . .  N NUMB   0072H   A   
MAIN . . . . . . .  C ADDR   0025H   A   
MAIN_LOOP. . . . .  C ADDR   0051H   A   
ONES . . . . . . .  N NUMB   0070H   A   
ONESEC_DELAY . . .  C ADDR   00C0H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RB8. . . . . . . .  B ADDR   0098H.2 A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SERIAL_ISR . . . .  C ADDR   00A2H   A   
SM2. . . . . . . .  B ADDR   0098H.5 A   
TDM_DONE . . . . .  C ADDR   009DH   A   
TDM_ISR. . . . . .  C ADDR   0085H   A   
TENS . . . . . . .  N NUMB   0071H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
THOUSANDS. . . . .  N NUMB   0073H   A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
_DATA. . . . . . .  C ADDR   00B7H   A   
_SER_END . . . . .  C ADDR   00BFH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
