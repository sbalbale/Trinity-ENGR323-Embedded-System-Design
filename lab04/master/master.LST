C51 COMPILER V9.00   MASTER                                                                04/16/2025 15:43:47 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MASTER
OBJECT MODULE PLACED IN master.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe master.c DB OE BR INCDIR(C:\SiLabs\MCU_2\Inc)

line level    source

   1          #include <c8051f120.h>
   2          //------------------------------------------------------------------------------------
   3          // Global CONSTANTS
   4          //------------------------------------------------------------------------------------
   5          #define ADDRESS 0x05
   6          #define S 0x24 // Letter codes for seven-segment display
   7          #define E 0x30
   8          #define N 0x6A
   9          #define T 0x70
  10          #define D 0x42
  11          #define O 0x62
  12          
  13          sbit LED = P1^6;
  14          
  15          //------------------------------------------------------------------------------------
  16          // Function PROTOTYPES
  17          //------------------------------------------------------------------------------------
  18          void UART_Init();
  19          void Interrupts_Init();
  20          void Timer_Init();
  21          void Port_IO_Init();
  22          void Oscillator_Init();
  23          void LED_Init(void);
  24          void fillup();
  25          
  26          //------------------------------------------------------------------------------------
  27          // Variable Declaration
  28          //------------------------------------------------------------------------------------
  29          int xdata fill[64];
  30          int data dummy = 0;
  31          int n = 0;
  32          short refresher = 0;
  33          sbit MSEL1 = P1^5; // Multiplexer Select bits
  34          sbit MSEL0 = P1^4;
  35          
  36          //------------------------------------------------------------------------------------
  37          // MAIN Routine
  38          //------------------------------------------------------------------------------------
  39          void main (void) {
  40   1          // disable watchdog timer
  41   1          WDTCN = 0xde;
  42   1          WDTCN = 0xad;
  43   1          
  44   1          Timer_Init();
  45   1          UART_Init();
  46   1          Interrupts_Init();
  47   1          Port_IO_Init();
  48   1          Oscillator_Init();
  49   1          LED_Init();
  50   1          
  51   1          SFRPAGE = LEGACY_PAGE; // Page to sit in for now
  52   1          
  53   1          while (1) { 
  54   2              // spin forever
  55   2          }
C51 COMPILER V9.00   MASTER                                                                04/16/2025 15:43:47 PAGE 2   

  56   1      }
  57          
  58          //-----------------------------------------------------------------------------
  59          // Initialization Subroutines
  60          //-----------------------------------------------------------------------------
  61          void LED_Init(void)
  62          {
  63   1          P1MDOUT |= 0x40;
  64   1          LED = 0;
  65   1      }
  66          
  67          void Timer_Init()
  68          {
  69   1          SFRPAGE = TIMER01_PAGE;
  70   1          TMOD = 0x21;     // Timer 0 in 16-bit mode, Timer 1 in 8-bit auto-reload mode
  71   1          TH0 = 0xDC;      // Load initial value into Timer 0
  72   1          TL0 = 0x00;
  73   1          TH1 = 0xFA;      // Load initial value for 9600 baud rate into TH1
  74   1          TCON = 0x41;     // TR1 = 1; enable Timer 1 Run Control
  75   1                            // IT0 = 1; /INT0 is edge triggered, falling-edge
  76   1      }
  77          
  78          void UART_Init()
  79          {
  80   1          SFRPAGE = UART0_PAGE;
  81   1          SCON0 = 0xC0;    // Mode 3 (9-bit UART), TB8 = 0, REN = 0
  82   1      }
  83          
  84          void Interrupts_Init()
  85          {
  86   1          IE = 0x91;       // Enable External Interrupt 0, Timer 0, and Serial Interrupts
  87   1          IP = 0x10;       // PS0 = 1: UART0 Interrupt Priority Control
  88   1      }
  89          
  90          void Oscillator_Init()
  91          {
  92   1          // Configure The External Oscillator to use a 22.1184 MHz frequency
  93   1          int i = 0;
  94   1          SFRPAGE = CONFIG_PAGE;
  95   1          
  96   1          // Step 1. Enable the external oscillator.
  97   1          OSCXCN = 0x67;
  98   1          
  99   1          // Step 2. Wait 1ms for initialization
 100   1          for (i = 0; i < 3000; i++);
 101   1          
 102   1          // Step 3. Poll for XTLVLD => '1'
 103   1          while ((OSCXCN & 0x80) == 0);
 104   1          
 105   1          // Step 4. Switch the system clock to the external oscillator.
 106   1          CLKSEL = 0x01;
 107   1          OSCICN = 0x00;
 108   1      }
 109          
 110          void Port_IO_Init()
 111          {
 112   1          // P0.0 - TX0 (UART0), Push-Pull, Digital
 113   1          SFRPAGE = CONFIG_PAGE;
 114   1          P0MDOUT = 0x01;  // Set P0.0 to Push-Pull output mode for UART TX
 115   1          
 116   1          // Configure P1 and P2 for display control and data
 117   1          P1MDOUT |= 0x30;  // Set P1.4 and P1.5 as outputs for multiplexer control
C51 COMPILER V9.00   MASTER                                                                04/16/2025 15:43:47 PAGE 3   

 118   1          P2MDOUT = 0xFF;   // Set P2 as output for display data
 119   1          
 120   1          XBR0 = 0x04;      // Route UART0 TX to P0.0
 121   1          XBR1 = 0x04;      // Route external interrupt 0 to P0.2
 122   1          XBR2 = 0x40;      // Enable crossbar
 123   1      }
 124          
 125          //-----------------------------------------------------------------------------
 126          // Support Subroutines
 127          //-----------------------------------------------------------------------------
 128          // Function to write 0x00 to 0xFF to RAM
 129          void fillup()
 130          {
 131   1          char SFRPAGE_SAVE = SFRPAGE; // Save Current SFR page
 132   1          int i;
 133   1          
 134   1          for(i=0; i<64; i++)
 135   1          {
 136   2              fill[i] = i;  // Write values from 0x00 to 0xFF to array
 137   2              
 138   2          }
 139   1      
 140   1          
 141   1          dummy = 1;  // Set flag to indicate RAM has been filled
 142   1          
 143   1          SFRPAGE = TIMER01_PAGE;
 144   1          TR0 |= 1;   // Turn on Timer 0 run control
 145   1          ET0 |= 1;   // Turn on Timer 0 overflow interrupt
 146   1          
 147   1          SFRPAGE = SFRPAGE_SAVE; // Restore SFR page
 148   1      }
 149          
 150          //-----------------------------------------------------------------------------------
 151          // Interrupt Service Routines
 152          //-----------------------------------------------------------------------------------
 153          void EX0_ISR (void) interrupt 0
 154          {
 155   1          if (dummy == 0)
 156   1          {
 157   2              fillup();  // Fill RAM with data when button is pressed first time
 158   2          }
 159   1          else
 160   1          {
 161   2              TB80 = 1;        // Set TB8 bit to indicate address byte
 162   2              SBUF0 = ADDRESS;  // Send address byte to specify receiver
 163   2          }
 164   1      }
 165          
 166          void Timer0_ISR (void) interrupt 1
 167          {
 168   1          char SFRPAGE_SAVE = SFRPAGE; // Save Current SFR page
 169   1          
 170   1          // Reload Timer 0 to start counting over
 171   1          EA = 0;  // Disable interrupts (critical section)
 172   1          SFRPAGE = TIMER01_PAGE;
 173   1          TH0 = 0xDC;  // Reload Timer 0 high byte
 174   1          TL0 = 0x00;  // Reload Timer 0 low byte
 175   1          EA = 1;      // Re-enable interrupts
 176   1          
 177   1          SFRPAGE = SFRPAGE_SAVE; // Restore SFR page
 178   1          
 179   1          // Time-division multiplexing for 7-segment display
C51 COMPILER V9.00   MASTER                                                                04/16/2025 15:43:47 PAGE 4   

 180   1          if(dummy != 0)
 181   1          {
 182   2              switch(refresher)
 183   2              {
 184   3                  case 0:
 185   3                      MSEL1 = 0;
 186   3                      MSEL0 = 0;
 187   3                      if(dummy == 1)
 188   3                          P2 = D;  // Display "D" for "DONE"
 189   3                      else
 190   3                          P2 = S;  // Display "S" for "SENT"
 191   3                      refresher++;
 192   3                      break;
 193   3                      
 194   3                  case 1:
 195   3                      MSEL1 = 0;
 196   3                      MSEL0 = 1;
 197   3                      if(dummy == 1)
 198   3                          P2 = O;  // Display "O" for "DONE"
 199   3                      else
 200   3                          P2 = E;  // Display "E" for "SENT"
 201   3                      refresher++;
 202   3                      break;
 203   3                      
 204   3                  case 2:
 205   3                      MSEL1 = 1;
 206   3                      MSEL0 = 0;
 207   3                      P2 = N;      // Display "N" for both "DONE" and "SENT"
 208   3                      refresher++;
 209   3                      break;
 210   3                      
 211   3                  case 3:
 212   3                      MSEL1 = 1;
 213   3                      MSEL0 = 1;
 214   3                      if(dummy == 1)
 215   3                          P2 = E;  // Display "E" for "DONE"
 216   3                      else
 217   3                          P2 = T;  // Display "T" for "SENT"
 218   3                      refresher = 0;
 219   3                      break;
 220   3                      
 221   3                  default: 
 222   3                      break;
 223   3              }
 224   2          }
 225   1      }
 226          
 227          //-----------------------------------------------------------------------------------
 228          // UART Transmit Interrupt Service Routine
 229          //-----------------------------------------------------------------------------------
 230          void ES_ISR (void) interrupt 4
 231          {
 232   1          TI0 = 0;    // Clear transmit interrupt flag
 233   1          
 234   1          TB80 = 0;   // Clear TB8 bit (this is data, not an address)
 235   1          
 236   1          // SBUF0 = 0x0F;  // Send dummy byte to clear the interrupt flag
 237   1      
 238   1          if(n < 64)
 239   1          {
 240   2              // SBUF0 = fill[n];  // Send data byte
 241   2              SBUF0 = 24; // Send the value 24
C51 COMPILER V9.00   MASTER                                                                04/16/2025 15:43:47 PAGE 5   

 242   2              n++;
 243   2          }
 244   1          else
 245   1          {
 246   2              dummy = 2;  // All data sent, update display to "SENT"
 247   2              LED = 1;    // Turn on LED to indicate completion
 248   2          }
 249   1      
 250   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
