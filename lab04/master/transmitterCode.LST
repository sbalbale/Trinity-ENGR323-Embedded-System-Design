C51 COMPILER V9.00   TRANSMITTERCODE                                                       04/09/2025 15:24:24 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TRANSMITTERCODE
OBJECT MODULE PLACED IN transmitterCode.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe transmitterCode.c DB OE BR INCDIR(C:\SiLabs\MCU_2\Inc)

line level    source

   1          // A.3 Transmitter (master) Configuration Code that allows multiprocessor communications via universal asy
             -nchronous receiver and transmitter (UART)
   2          #include <c8051f120.h>
   3          
   4          //------------------------------------------------------------------------------------
   5          // Global CONSTANTS
   6          //------------------------------------------------------------------------------------
   7          #define ADDRESS 0x05
   8          #define S 0x24 // Letter codes
   9          #define E 0x30
  10          #define N 0x6A
  11          #define T 0x70
  12          #define D 0x42
  13          #define O 0x62
  14          
  15          //------------------------------------------------------------------------------------
  16          // Function PROTOTYPES
  17          //------------------------------------------------------------------------------------
  18          void UART_Init();
  19          void Interrupts_Init();
  20          void Timer_Init();
  21          void Port_IO_Init();
  22          void Oscillator_Init();
  23          void LED_Init(void);
  24          
  25          //------------------------------------------------------------------------------------
  26          // Variable Declaration
  27          //------------------------------------------------------------------------------------
  28          int xdata fill[9];
  29          int data dummy = 0;
  30          int n = 0;
  31          short refresher = 0;
  32          int led_flash_counter = 0;
  33          
  34          sbit MSEL1 = P1 ^ 5; // Multiplexer Select bits
  35          sbit MSEL0 = P1 ^ 4;
  36          
  37          sbit LED = P1 ^ 6; // green LED: '1' = ON; '0' = OFF
  38          
  39          //------------------------------------------------------------------------------------
  40          // MAIN Routine
  41          //------------------------------------------------------------------------------------
  42          void main(void)
  43          {
  44   1          // Disable watchdog timer
  45   1          WDTCN = 0xde;
  46   1          WDTCN = 0xad;
  47   1      
  48   1          Timer_Init();
  49   1          UART_Init();
  50   1          Interrupts_Init();
  51   1          Port_IO_Init();
  52   1          Oscillator_Init();
  53   1          LED_Init();
  54   1      
C51 COMPILER V9.00   TRANSMITTERCODE                                                       04/09/2025 15:24:24 PAGE 2   

  55   1          SFRPAGE = LEGACY_PAGE; // Set to legacy page
  56   1      
  57   1          while (1)
  58   1          { // Spin forever
  59   2          }
  60   1      }
  61          
  62          void LED_Init(void)
  63          {
  64   1          P1MDOUT |= 0x40;
  65   1          LED = 0;
  66   1      }
  67          
  68          //-----------------------------------------------------------------------------
  69          // Initialization Subroutines
  70          //-----------------------------------------------------------------------------
  71          void Timer_Init()
  72          {
  73   1          SFRPAGE = TIMER01_PAGE;
  74   1          TMOD = 0x21;
  75   1          // Timer 0 uses a pre-scaled SYSCLK; Timer 1 for baud rate generation
  76   1          TH0 = 0xDC; // Load initial value into Timer 0
  77   1          TL0 = 0x00;
  78   1          // TH1 = 0xFA;  // Load initial value into Timer 1
  79   1          TH1 = 0xF4; // Load initial value into Timer 1 for 9600 baud rate
  80   1          TCON = 0x41; // Enable Timer 1 and set INT0 as edge triggered
  81   1      }
  82          
  83          void UART_Init()
  84          {
  85   1          SFRPAGE = UART0_PAGE;
  86   1          SCON0 = 0xC0;
  87   1      }
  88          
  89          void Interrupts_Init()
  90          {
  91   1          IE = 0x91;
  92   1          IP = 0x10; // Set UART0 interrupt priority
  93   1      }
  94          
  95          void Oscillator_Init()
  96          {
  97   1          int i = 0;
  98   1          SFRPAGE = CONFIG_PAGE;
  99   1          OSCXCN = 0x67; // Enable external oscillator (22.1184 MHz)
 100   1          for (i = 0; i < 3000; i++)
 101   1              ; // Wait for oscillator to stabilize
 102   1          while ((OSCXCN & 0x80) == 0)
 103   1              ;          // Wait for XTLVLD flag
 104   1          CLKSEL = 0x01; // Switch to external oscillator
 105   1          OSCICN = 0x00;
 106   1      }
 107          
 108          void Port_IO_Init()
 109          {
 110   1          // P0.0 - TX0 (UART0) as Push-Pull Digital Output
 111   1          SFRPAGE = CONFIG_PAGE;
 112   1          P0MDOUT = 0x01; // Set P0.0 to push-pull mode
 113   1          XBR0 = 0x04;    // Route UART0 TX to P0.0
 114   1          XBR1 = 0x04;    // Route external interrupt 0 to P0.2
 115   1          XBR2 = 0x40;    // Enable crossbar and weak pull-ups
 116   1      }
C51 COMPILER V9.00   TRANSMITTERCODE                                                       04/09/2025 15:24:24 PAGE 3   

 117          
 118          //-----------------------------------------------------------------------------
 119          // Support Subroutines
 120          //-----------------------------------------------------------------------------
 121          // The following routine writes 00 to FF into a RAM array.
 122          void fillup()
 123          {
 124   1          char SFRPAGE_SAVE = SFRPAGE; // Save current SFR page
 125   1          // int i;
 126   1          // for (i = 0; i < 256; i++)
 127   1          // {
 128   1          //     fill[i] = i; // Write values from 0x00 to 0xFF into array "fill"
 129   1          // }
 130   1      
 131   1          // send 0x00 to 0xFF to the slave, manually add the data to the array
 132   1          fill[0] = 0x00;
 133   1          fill[1] = 0x00;
 134   1          fill[2] = 0x00;
 135   1          fill[3] = 0x00;
 136   1          fill[4] = 0x00;
 137   1          fill[5] = 0xFF;
 138   1          fill[6] = 0xFF;
 139   1          fill[7] = 0xFF;
 140   1          fill[8] = 0xFF;
 141   1          fill[9] = 0xFF;
 142   1      
 143   1          dummy = 1;
 144   1          SFRPAGE = TIMER01_PAGE;
 145   1          TR0 |= 1;               // Turn on Timer 0 run control
 146   1          ET0 |= 1;               // Enable Timer 0 overflow interrupt
 147   1          SFRPAGE = SFRPAGE_SAVE; // Restore SFR page
 148   1      }
 149          
 150          //-----------------------------------------------------------------------------------
 151          // Interrupt Service Routine
 152          //-----------------------------------------------------------------------------------
 153          void EX0_ISR(void) interrupt 0
 154          {
 155   1          if (dummy == 0)
 156   1              fillup();
 157   1          else
 158   1          {
 159   2              TB80 = 1;        // Make all slaves listen
 160   2              SBUF0 = ADDRESS; // Send out address to specify listener
 161   2          }
 162   1      }
 163          
 164          void Timer0_ISR(void) interrupt 1
 165          {
 166   1          char SFRPAGE_SAVE = SFRPAGE; // Save current SFR page
 167   1          // Reload Timer 0 (critical region)
 168   1          EA = 0; // Disable interrupts
 169   1          SFRPAGE = TIMER01_PAGE;
 170   1          TH0 = 0xDC; // Load initial value
 171   1          TL0 = 0x00;
 172   1          EA = 1;                 // Re-enable interrupts
 173   1          SFRPAGE = SFRPAGE_SAVE; // Restore SFR page
 174   1      
 175   1          // LED flashing code - add this section
 176   1          led_flash_counter++;
 177   1          if (led_flash_counter >= 20)
 178   1          {                          // Adjust this value for faster/slower flashing
C51 COMPILER V9.00   TRANSMITTERCODE                                                       04/09/2025 15:24:24 PAGE 4   

 179   2              LED = !LED;            // Toggle LED state
 180   2              led_flash_counter = 0; // Reset counter
 181   2          }
 182   1      
 183   1          if (dummy != 0)
 184   1          {
 185   2              // TDM approach to display RECD (or similar status)
 186   2              switch (refresher)
 187   2              {
 188   3              case 0:
 189   3                  MSEL1 = 0;
 190   3                  MSEL0 = 0;
 191   3                  if (dummy == 1)
 192   3                      P2 = D;
 193   3                  else
 194   3                      P2 = S;
 195   3                  refresher++;
 196   3                  break;
 197   3              case 1:
 198   3                  MSEL1 = 0;
 199   3                  MSEL0 = 1;
 200   3                  if (dummy == 1)
 201   3                      P2 = O;
 202   3                  else
 203   3                      P2 = E;
 204   3                  refresher++;
 205   3                  break;
 206   3              case 2:
 207   3                  MSEL1 = 1;
 208   3                  MSEL0 = 0;
 209   3                  P2 = N;
 210   3                  refresher++;
 211   3                  break;
 212   3              case 3:
 213   3                  MSEL1 = 1;
 214   3                  MSEL0 = 1;
 215   3                  if (dummy == 1)
 216   3                      P2 = E;
 217   3                  else
 218   3                      P2 = T;
 219   3                  refresher = 0;
 220   3                  break;
 221   3              default:
 222   3                  break;
 223   3              }
 224   2          }
 225   1      } // Timer0_ISR()
 226          
 227          //-----------------------------------------------------------------------------------
 228          // SBUF INTERRUPT
 229          //-----------------------------------------------------------------------------------
 230          void ES_ISR(void) interrupt 4
 231          {
 232   1          TI0 = 0;
 233   1          TB80 = 0; // Only the chosen listener will listen (after sending address byte)
 234   1      
 235   1          if (n < 256)
 236   1          {
 237   2              SBUF0 = fill[n];
 238   2              n++;
 239   2          }
 240   1          else
C51 COMPILER V9.00   TRANSMITTERCODE                                                       04/09/2025 15:24:24 PAGE 5   

 241   1          {
 242   2              dummy = 2;
 243   2              LED = 1;
 244   2          }
 245   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    500    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     18    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
